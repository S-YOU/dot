#!/usr/bin/env ruby

require "tempfile"
require "yaml"

class Fn
  def message(msg)
    $stderr.puts "### #{msg}" if @verbose
  end

  def system_e(*args)
    system(*args) || (p args; raise "Error: command failed")
  end

  def main
    @conf_path = ENV['HOME'].to_s + "/.fn.yml"

    @usage = <<EOF
# 使用例

```
fn \*.c
fn \*.c -vi
fn \*.c -ls
fn /usr/include a\*.h
fn -conf sample \*.h

# verbose
fn -v \*.c

# 無視ディレクトリを無効
fn -a \*.c
```

# 設定ファイル

#{@conf_path}

サンプル：

```
sample:
    dirs:
        - /usr/include/linux/can
        - /usr/include/linux/wimax
gdb:
    dirs:
        - /usr/include/gdb
```
EOF

    @dirs     = []
    @pattern  = []
    @cmd      = nil
    @case     = :smart  # :smart or :sensitive or :insensitive
    @ignore_dirs = [".git", ".svn", "node_modules"]

    load_conf

    parse_args

    # 検索語が大文字を含んでいる場合はケースセンシティブ
    case @case
    when :smart
      ignore_case = (@pattern.downcase == @pattern)
    when :sensitive
      ignore_case = false
    when :insensitive
      ignore_case = true
    end

    @dirs.each do |dir|
      search(dir, @pattern, ignore_case, @cmd, @ignore_dirs)
    end
  end
  
  def load_conf
    if File.exist?(@conf_path)
      @conf = YAML.load_file(@conf_path)
    else
      @conf = {}
    end
  end

  def parse_args
    args = ARGV
    commands = {
      "-vi" => "vim",
      "-ls" => "ls -l",
    }

    option_excluded = []
    i = 0
    while i < args.length
      arg = args[i]
      if commands[arg]
        @cmd = commands[arg]
        i += 1
      elsif arg == "-conf"
        @conf_key = args[i + 1]
        i += 1
      elsif arg == "-v"
        @verbose = true
      elsif arg == "-a"
        @ignore_dirs = []
      elsif arg == "-h"
        print @usage
        exit
      else
        option_excluded << arg
      end
      i += 1
    end
    args = option_excluded

    @dirs = []

    if args.length == 0
      print @usage
      exit
    elsif args.length == 1
      @pattern = args[0]
      if @conf_key
        @dirs = @conf[@conf_key]["dirs"]
      else
        @dirs << "."
      end
    else
      @dirs << args[0]
      @pattern = args[1]
    end

    message "Search directories:"
    @dirs.each do |dir|
      message "  #{dir}"
    end
    message "Ignore patterns:"
    @ignore_dirs.each do |pat|
      message "  #{pat}"
    end
  end

  def search(dir, pattern, ignore_case, cmd, ignore_dirs)
    if ignore_dirs && !ignore_dirs.empty?
      ignore_options = '\( ' + ignore_dirs.map {|x| "-name '#{x}'"}.join(" -or ") + ' \) -prune -or '
    else
      ignore_options = ""
    end
    print_option = cmd ? "-print0" : "-print"
    name_option  = ignore_case ? "-iname" : "-name"
    find_cmd = "find '#{dir}' #{ignore_options} \\( -type f #{name_option} '#{pattern}' \\) #{print_option}"
    message("find_cmd = #{find_cmd}")
    if cmd
      Tempfile.create("fn") do |tmp|
        system_e("#{find_cmd} > #{tmp.path}")
        if File.size(tmp.path) > 0
          # スペースなどを含むファイル名に対応するため、標準入力を/dev/ttyにしつつxargs -0
          system_e("xargs -0 sh -c '#{cmd} \"$@\" < /dev/tty' vim < #{tmp.path}")
        end
      end
    else
      system_e("#{find_cmd} | less -F")
    end
  end
end


Fn.new.main
