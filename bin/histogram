#!/usr/bin/env ruby
# encoding: utf-8

usage = <<EOF
テキストでヒストグラムを表示するスクリプト
例：wc -l *.c | histogram
EOF

require "optparse"

$opt = {}
$opt[:include_last_line]  = false
$opt[:sort]               = nil
$opt[:max]                = 50

opt = OptionParser.new(usage=usage)
opt.on("--include-last-line", "入力の最後の行を含める（デフォルトはオフ）") {|v| $opt[:include_last_line] = true}
opt.on("--asc", "昇順でソートする")         {|v| $opt[:sort] = :asc}
opt.on("--desc", "降順でソートする")        {|v| $opt[:sort] = :desc}
opt.on("--no-sort", "ソートしない")         {|v| $opt[:sort] = :no_sort}
opt.on("--max=LENGTH", "最大行の「*」の数") {|v| $opt[:max]  = v.to_i}
opt.parse!(ARGV)

lines = readlines()
unless $opt[:include_last_line]
  lines = lines[0...-1]
end

total = 0
max_value = 0
rows = []

lines.each do |line|
  line.chomp!

  a = line.split(nil, 2)
  value = a[0].to_i
  name  = a[1].to_s
    
  rows.push([value, name])

  if max_value < value
    max_value = value
  end

  total += value
end

case $opt[:sort]
when :asc, nil
  rows.sort! {|x, y| x[0] <=> y[0]}
when :desc
  rows.sort! {|x, y| y[0] <=> x[0]}
else
  # do nothing
end

rows.each do |row|
  value = row[0]
  name  = row[1]

  ratio = value / max_value.to_f
  percent = (value / total.to_f * 100).round
  printf("%#{$opt[:max]}s %6d (%3d%%) %s\n", "*" * ($opt[:max] * ratio).ceil, value, percent, name)
end
printf("%#{$opt[:max]}s %6d  %s  %s\n", " " * $opt[:max], total, "合計", rows.length)
