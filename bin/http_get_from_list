#!/usr/bin/env ruby
# encoding: utf-8

#=============================================================================
#   テキストファイルからURLのリストを読み込み、
#   マルチスレッドでhttp getするスクリプト。
#
#   URLリストファイルの仕様
#   ・タブ区切り
#     1. URL（必須）
#     2. ステータスコードの期待値（省略可）
#   ・URLは全て同一ホストでなければならない
#=============================================================================

URL_FILE_EXAMPLE =<<EOF
http://127.0.0.1:8000/employees/
http://127.0.0.1:8000/asd
EOF

require "net/https"
require "uri"

COLOR_RED     = "\x1b[0;31m"
COLOR_GREEN   = "\x1b[0;32m"
COLOR_YELLOW  = "\x1b[0;33m"
COLOR_BLUE    = "\x1b[0;34m"
COLOR_MAGENTA = "\x1b[0;35m"
COLOR_GYAN    = "\x1b[0;36m"
COLOR_RESET   = "\x1b[0m"

COLOR_SUCCESS = COLOR_GREEN
COLOR_WARNING = COLOR_YELLOW
COLOR_FAILURE = COLOR_RED

class TargetUrl
  attr_accessor :uri, :expected

  def initialize(url, expected)
    unless url.include?("://")
      url = "http://" + url
    end
    @uri = URI.parse(url)
    @expected = expected
  end

  def host;        @uri.host;        end
  def port;        @uri.port;        end
  def path;        @uri.path;        end
  def request_uri; @uri.request_uri; end
end

def download(list, thread_id, thread_count)
  if list.length == 0
    return
  end

  # Keep-Aliveをつけるので、相手が同一ホストならTCPコネクションは1個しか使われないはず。
  Net::HTTP.start(list.first.host, list.first.port) do |http|
    # タイムアウトすると、自動的に1回だけリトライする。この挙動を変えることはできないようである。
    # https://bugs.ruby-lang.org/issues/10674
    #http.read_timeout = 1
    #http.open_timeout = 1

    count_by_code = Hash.new(0)
    unexpected_count = 0
    i = thread_id
    started_at = Time.now
    while i < list.length
      target_url = list[i]

      begin
        request_started_at = Time.now
        res = http.request_get(target_url.request_uri, {"Connection" => "Keep-Alive"})

        count_by_code[res.code.to_s] += 1

        # expectedがある場合は、それに一致しているかによって色分け
        if target_url.expected
          if res.code.to_s == target_url.expected
            color = COLOR_SUCCESS
          else
            color = COLOR_FAILURE
            unexpected_count += 1
          end
        else
          # expectedがない場合は、ステータスコードに応じて色分け
          case res.code.to_s[0]
          when "5"
            color = COLOR_FAILURE
          when "4"
            color = COLOR_WARNING
          else
            color = COLOR_SUCCESS
          end
        end

        percent = ((i / list.length.to_f) * 100).to_i
        now = Time.now
        puts "#{color}total_time:#{now - started_at}\ti:#{i}\tpercent:#{percent}\telapsed:#{now - request_started_at}\tstatus:#{res.code}\texpected:#{target_url.expected}\turl:#{target_url.uri}#{COLOR_RESET}\n"
      rescue
        print COLOR_FAILURE
        puts target_url.uri
        puts "Error: #{$!.message}"
        puts $!.backtrace.join("\n")
        puts COLOR_RESET
      end
      i += thread_count
    end
    Thread.current[:count_by_code] = count_by_code
    Thread.current[:unexpected_count] = unexpected_count
  end
end

def download_list(list, thread_count)
  threads = []
  thread_count.times do |thread_id|
    threads << Thread.new(thread_id) {|thread_id|
      download(list, thread_id, thread_count)
    }
  end

  threads.each {|t| t.join}

  count_by_code = Hash.new(0)
  unexpected_count = 0
  threads.each do |t|
    t[:count_by_code].each do |k, v|
      count_by_code[k] += v
    end
    unexpected_count += t[:unexpected_count]
  end
  return {
    count_by_code: count_by_code,
    unexpected_count: unexpected_count,
  }
end

def main
  if ARGV.length < 1
    puts "Usage: #{$0} <url_file> [<thread_count>]"
    exit 1
  end

  url_file      = ARGV[0]
  thread_count  = (ARGV[1] || "8").to_i

  puts "url_file      = #{url_file}"
  puts "thread_count  = #{thread_count}"
  
  list0 = File.readlines(url_file)
  list = list0.map {|line|
    line.chomp!
    cols = line.split("\t", 2)
    if cols.length >= 2
      TargetUrl.new(cols[0], cols[1])
    else
      TargetUrl.new(cols[0], nil)
    end
  }

  started_at = Time.now
  ret = download_list(list, thread_count)
  count_by_code = ret[:count_by_code]
  unexpected_count = ret[:unexpected_count]
  puts "完了。所要時間: #{Time.now - started_at} seconds"
  puts "総リクエスト数: #{count_by_code.values.reduce(0) {|s, x| s + x}}"
  puts "予期しないステータスコード: #{unexpected_count}"
  p count_by_code
end

main
