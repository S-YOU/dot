#!/usr/bin/env ruby

require "optparse"
require "pathname"
require "csv"
require "nkf"

opt = OptionParser.new
opt.banner = <<EOF
CSV・TSVファイルをPostgreSQLにインポートするためのSQLを出力するスクリプト。

Example:
    # 1行目をヘッダとして扱う場合
    pgimportcsv -H sample.csv | psql

EOF
opt.on("-d DELIMITER", "区切り文字 (default: ,)") {|v| $opt[:delimiter] = v}
opt.on("-e ENCODING", "UTF-8 | CP932 (default: UTF-8)") {|v| $opt[:encoding] = v}
opt.on("-H", "1行目をヘッダとして扱う (default: false)") {|v| $opt[:header] = true}
opt.on("-t TABLE_NAME", "テーブル名 (default: t)") {|v| $opt[:table_name] = v}
opt.parse!(ARGV)

$opt = {}
$opt[:delimiter]  = ","
$opt[:encoding]   = "UTF-8"
$opt[:header]     = false
$opt[:table_name] = "t"

ENCODINGS = {
  "CP932" => { postgres: "SJIS" },
  "UTF-8" => { postgres: "UTF8" },
}

def print_sql(filename)
  pathname = Pathname.new(filename)
  table_name = $opt[:table_name]

  column_count = 0
  row = nil
  File.open(filename) do |f|
    first_line = NKF.nkf("--oc=UTF-8", f.gets.chomp)
    row = CSV.parse_line(first_line, col_sep: $opt[:delimiter])
    column_count = row.length
  end

  if $opt[:header]
    column_names = row.map {|x| x.downcase.gsub(/\s/, "_")}
  else
    column_names = (1..column_count).map {|i| "c#{i}"}
  end

  puts <<EOF
DROP TABLE IF EXISTS #{table_name};
CREATE TABLE #{table_name} (
  _id SERIAL,
#{
  column_names.map {|x| "  #{x} TEXT"}.join(",\n")
}
);

\\copy #{table_name} (#{column_names.join(', ')}) FROM '#{pathname.realpath}' WITH ENCODING '#{ENCODINGS[$opt[:encoding]][:postgres]}' CSV DELIMITER '#{$opt[:delimiter]}' #{$opt[:header] ? 'HEADER' : ''};
EOF
end

if ARGV.empty?
  puts opt.help
  exit 1
else
  print_sql(ARGV[0])
end
