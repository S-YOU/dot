#!/usr/bin/ruby

require "optparse"

USAGE = <<EOF
Usage: rpl <from> <to> [files...]
EOF

# 複数ファイルから文字列を検索・置換するスクリプト
#
# - ファイル名が指定されなかった場合はgit ls-filesを対象とする
# - 通常ファイルでなければスキップする
# - 変更がないファイルはタイムスタンプを変えない

def rpl(filename, from, to)
  unless File.ftype(filename) == "file"
    puts "\x1b[1;33m%-10s #{filename}    (not regular file)\x1b[0m" % "Ignore"
    return [false, 0]
  end

  count = 0
  content = File.read(filename)
  begin
    content.gsub!(from) { count += 1; to }
  rescue
    if $!.message == "invalid byte sequence in UTF-8"
      puts "\x1b[1;33m%-10s #{filename}    (not UTF-8)\x1b[0m" % "Ignore"
      return [false, 0]
    end
    $stderr.print "\x1b[0;31m"
    $stderr.puts "Error when processing [#{filename}]"
    $stderr.puts $!.message
    $stderr.puts $!.backtrace
    $stderr.print "\x1b[0m"
    exit 2
  end
  if count > 0
    File.write(filename, content)
    puts "%-10s #{filename}    (#{count} matches)" % "Replacing"
  end

  return [true, count]
end

def build_regexp(from)
  query_option = 0
  if @opts[:regexp]
    query_str = from
  else
    query_str = Regexp.escape(from)
  end
  if @opts[:word]
    query_str = "\\b#{query_str}\\b"
  end
  if @opts[:ignore_case]
    query_option |= Regexp::IGNORECASE
  end
  return Regexp.new(query_str, query_option)
end

def main
  @opts = {}

  opt = OptionParser.new
  opt.banner = USAGE
  opt.on("-i", "--ignore-case", "大文字小文字を区別しない") {|v| @opts[:ignore_case] = true; }
  opt.on("-r", "--regexp", "正規表現で検索する") {|v| @opts[:regexp] = true }
  opt.on("-w", "--word", "単語にマッチ") {|v| @opts[:word] = true; }
  opt.parse!(ARGV)

  if ARGV.length < 2
    puts opt.help
    exit 1
  end

  from = ARGV[0]
  to = ARGV[1]
  filenames = if ARGV.length == 2
                `git ls-files`.split("\n")
              else
                ARGV[2..-1]
              end

  replaced_count = 0
  no_change_count = 0
  ignored_count = 0
  total_match_count = 0

  from_re = build_regexp(from)

  puts "Search: #{from_re.inspect}"
  puts

  filenames.each do |filename|
    is_processed, match_count = rpl(filename, from_re, to)
    if is_processed
      if match_count > 0
        replaced_count += 1
      else
        no_change_count += 1
      end
    else
      ignored_count += 1
    end
    total_match_count += match_count
  end

  puts
  puts "#{filenames.length} files (replaced: #{replaced_count} / no change: #{no_change_count} / ignored: #{ignored_count}) Total #{total_match_count} matches"
end

main
