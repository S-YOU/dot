#!/usr/bin/env ruby
#
# ExcelのtsvをSQLに変換するスクリプト
#

require 'optparse'

# global variables

$KEYS = [1]
$MODE = ""
$MODES = ["insert", "update"]
$SEPARATOR = "\t"
$TABLE_NAME = "TABLE_NAME"
$USE_CLIPBOARD = false


def parseArgs()
	ARGV.options {|opt|
		opt.on('-c', '--clipboard', "STDINでなくクリップボードから読み込む") {|v| $USE_CLIPBOARD = true }
		opt.on('-k KEY','--key', "主キーをカンマ区切りで。例：--key=1,3 (既定：#{$KEY}") {|v| $KEYS = v.split(',').map {|x| x.to_i} }	# v に -a の引数が入る
		opt.on('-f', '--field FIELD', "フィールド区切り文字(既定:タブ)") {|v| $SEPARATOR = v }

		opt.on_tail('-h', '--help', 'このヘルプを表示する。') do 
			puts opt
			exit
		end

		opt.parse!
	}

  if ARGV.length == 0
		$TABLE_NAME = 'table_name'
    $MODE = 'insert'
  elsif ARGV.length == 1
		$TABLE_NAME = ARGV[0]
		$MODE = 'insert'
  elsif ARGV.length >= 2
		$TABLE_NAME = ARGV[0]
		$MODE = ARGV[1].downcase
  end
end


def main()
	if $USE_CLIPBOARD
		infp  = IO.popen("/usr/bin/getclip", "r")
		outfp = IO.popen("/usr/bin/putclip", "w")
		$stderr.puts "Wrote to clipboard."
	else
		infp  = $stdin
		outfp = $stdout
	end

	tsv = infp.read()

	if not tsv.include?("\r\n")
		$stderr.puts 'EOF must be \r\n'
		exit 1
	end

	columnNames = []
	strColumnNames = ""

	lines = tsv.split("\r\n")

	lineNo = 0
	lines.each do |line|
		lineNo += 1
		fields = line.split($SEPARATOR)
		fields = fields.map {|f|
			if f.length > 0 && f[0].chr == '"' && f[-1].chr == '"'
				f = f[1...-1].gsub('""', '"') 
			end

			if f.length == 0
				f = "NULL"
			else
				f = "'" + f + "'"
			end
			f
		}

		if lineNo == 1
			columnNames = fields
			strColumnNames = columnNames.join(",").gsub("'", "")
		else
			case $MODE
			when "insert"
				outfp.puts "INSERT into #{$TABLE_NAME} (#{strColumnNames}) VALUES (" + fields.join(",") + ");"
			when "update"
				sql = "UPDATE #{$TABLE_NAME} SET "
				for i in 0...(columnNames.length) do
					sql += (i == 0 ? "" : ",") + "#{columnNames[i]}=#{fields[i]}"
				end
				sql += " WHERE "
				$KEYS.each_with_index do |key_index, i|
					key_index -= 1	# adjust to 1 origin
					sql += (i == 0 ? "" : " AND") + "#{columnNames[key_index]}=#{fields[i]}"
				end
				outfp.puts sql
			end
		end
	end
end

parseArgs()
main()
