#!/usr/bin/env ruby
# encoding: utf-8

arg_offset    = ARGV[0].to_i(16)
dumpbin_path  = ARGV[1]

# アドレスを32ビットで表示するか64ビットで表示するか
base = arg_offset >= 2**32 ? 16 : 8 
# 先頭に付与する0x00の数
zero_count = arg_offset % 16
# 先頭に0x00を付与したバイト列
bytes = "\0" * zero_count + File.binread(dumpbin_path)
# オフセットを16の倍数で丸めたもの（2行目以降で使用）
offset16 = arg_offset - (arg_offset % 16) 

printf("%#{base}s  0 1  2 3  4 5  6 7  8 9  A B  C D  E F   0123456789ABCDEF\n", " ");

bytes.each_char.each_slice(16).with_index do |line, li|
  if li == 0
    off = arg_offset
  else
    off = offset16 + 16 * li
  end
  address   = sprintf("%0#{base}x: ", off)
  hex_part  = line.map.with_index {|chr, i|
    if li == 0 && i < zero_count
      i.even? ? "  " : "   "
    else
      sprintf("%02x" + (i.even? ? "" : " "), chr.ord)
    end
  }.join
  char_part = line.map.with_index {|chr, i|
    if li == 0 && i < zero_count
      " "
    else
      (0x20 <= chr.ord && chr.ord <= 0x7e) ? chr : "."
    end
  }.join
  if line.length != 16
    a = 16 - line.length
    hex_part  += "     " * (a / 2) + "   " * (a % 2)
  end
  puts address + hex_part + " " + char_part
end
