#!/usr/bin/env ruby
# encoding: utf-8

offset = ARGV[0].to_i(16)
dumpbin_path = ARGV[1]

base = offset >= 2**32 ? 16 : 8 
zero_count = offset % 16
bytestr = "\0" * zero_count + File.binread(dumpbin_path)
new_offset = offset - (offset % 16) 

#puts "offset = #{sprintf('%x', offset)} #{offset}"
#puts "zero_count = #{zero_count}"
#p ARGV
#puts "length = #{bytestr.length}"

io = IO.popen("xxd", "r+")
io.print bytestr
io.close_write
xxd_result = io.read
io.close

printf("%#{base}s  0 1  2 3  4 5  6 7  8 9  A B  C D  E F   0123456789ABCDEF\n", " ");

linenum = 0 
xxd_result.each_line do |line|
  address, content = line.split(":", 2)
  if zero_count > 0 && linenum == 0   # ゼロを付加した最初の行のみ
    zero_count.times do               # 付加した部分を消す
      content.sub!("00", "  ")
      content.sub!(/\./, " ")
    end 
    address = sprintf("%0#{base}x", offset)
  else
    address = sprintf("%0#{base}x", address.to_i(16) + new_offset)
  end 
  address = address.gsub(/^(\w{8})(\w{8})/, '\1_\2')
  puts "#{address}:#{content}"
  linenum += 1
end
