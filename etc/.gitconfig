# マシン固有の設定は
# ~/.gitconfig.local
# に書くこと

[user]
    name = Aoyama, Shotaro
    email = aosho235@gmail.com
#[http]
#   proxy = http://example.co.jp:8080
#[https]
#   proxy = http://example.co.jp:8080
#[url "https://"]
#   insteadOf = git://
[alias]
    ba = for-each-ref --sort=committerdate refs/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
    ci = commit
    co = checkout
    cp = cherry-pick
    diff-summary = diff --name-only
    exec = !sh -c 'exec "$@"' $(which sh)
    sta = status --short --branch --ignored
    ls = ls-files
    # git rootからgrepする
    rgrep = !git grep
    logv = log --name-status
    graph = log --graph --date-order -C -M --pretty=format:\"<%h> %ad [%an] %Cgreen%d%Creset %s\" --all --date=short
    # grep from root
    grepr = !git grep
    cancel-previous-commit = reset HEAD~1
    # カレントブランチをoriginにプッシュする
    #pushorigin  = !git push --set-upstream origin `git symbolic-ref --short HEAD`
    pushorigin  = !git push -u origin
    unstage = reset HEAD
    modify-history = rebase -i HEAD~6
    # masterからの分岐点以降のコミットを表示する
    new-commits-from-master = log --oneline --graph master..HEAD
    zip = !git archive --format=zip --prefix=$(basename $(git exec pwd))/ HEAD > $(basename $(git exec pwd))-$(git symbolic-ref --short HEAD).zip
    # mergeやreset --hardのとき、変更を破棄する
    assume-unchanged = update-index --assume-unchanged
    no-assume-unchanged = update-index --no-assume-unchanged
    alias = !git config --get-regexp ^alias\\. | sort
    # 既に存在しないファイルをgitから削除する
    rm-nonexist = !git ls-files -dz | xargs -0 git rm
    tag-by-date = log --tags --simplify-by-decoration --pretty='format:%ai %Cred%h%Creset %d %Cgreen%s%Creset'
    # mergeやreset --hardのとき、変更を破棄しない
    skip-worktree = update-index --skip-worktree
    no-skip-worktree = update-index --no-skip-worktree
    skipped = !git ls-files -v | grep --color '^[Shs]'
    # git rmせずに普通にrmしちゃったファイルたちを一括でgit rmする
    rm-files = !git rm `git ls-files --deleted`
    commit-count = shortlog -sn
    stashlist = stash list --format='%gd (%cr):     %Cgreen%gs%Creset'
    # タグをつけるには
    # git tag v1.0
    # git tag-by-date
    # git push origin --tags
    shallow-clone = clone --depth 1
    # マージされているブランチを削除する
    delete-merged-branches = !git branch -d $(git branch --merged | grep -v -w master | grep -v '*' || echo 'マージ済みブランチが存在しません')
    vimdiff = difftool --tool=vimdiff --prompt
    # 追跡されていないファイルを削除するには
    # git clean -n    # dry run  .gitignoreされているファイルは含めない
    # git clean -f    # execute
    # git clean -dn   # dry run  .gitignoreされているファイルを含める
    # git clean -df   # execute
    merged-pull-request = log --grep 'Merge pull request'  --pretty='format:%ai %b'
[merge]
    tool = vimdiff
[credential]
    # https://でパスワード入力を一定時間キャッシュする
    helper = cache --timeout=86400
[push]
    # matching, simple, currentの違い
    # https://qiita.com/awakia/items/6aaea1ffecba725be601#simple
    default = current
[core]
    # 自分だけのgitignore
    excludesfile = ~/.gitignore
[log]
    #date = relative
#[format]
    #pretty = format:"%ai (%ar) %Cred%H%Creset %an%n%N%n    %s%n"
[color]
    # 標準出力がパイプされていてもカラー表示する
    ui = auto
[fetch]
    prune = true
[color "diff"]
    meta = blue bold
[diff]
    tool = vimdiff
    noprefix = true
    indentHeuristic = true
[difftool]
    prompt = false
    trustExitCode = true
[mergetool]
    prompt = false
    trustExitCode = true
[init]
    templatedir = ~/.git_template
[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
[include]
    path = .gitconfig.local
